Write a function that takes in a two-dimensional array and returns a one-dimensional 
array of all the array's elements in zigzag order. Zigzag order starts at the top
left corner of the two-dimensional array, goes down by one element, and proceeds in 
a zigzag pattern all the way to the bottom right corner.

Time --> O(n)
Space --> O(n)
function zigzagTraverse(array){
  let result = []
  let goingDown = true
  let r = 0
  let c = 0
  while(!outBound(r,c,array)){
    result.push(array[r][c])
    if(goingDown){
      if(r === array.length - 1 || c === 0){
        if(r === array.length - 1){
          c++
        }else {
          r++
        }
        goingDown = false
      }else {
      r++
      c--
      }
    
    }else {
      if(r === 0 || c === array[0].length - 1){
          if(c === array[0].length - 1){
            r++
          }else {
            c++
          }
        goingDown = true
      
      }else {
        r--
        c++
      
      }
    
    }
  }
 return result
}


function outBound(r,c,array){
  return r < 0 || r >= array.length || c < 0 || c >= array[0].length
}

















main(array)
let result = []
goingDown = true
r= 0
c = 0
while(!OutBound(r,c,array)){
  result.push(array[r][c])
  if(goingDown){
    if(r === array.length - 1 || c === 0){
      goingDown = false
      if(r === array.length - 1){
        c++
      }else{
        r++
      }
    }else {
      r++
      c--
    }
  }else {
    if(r === 0 || c === array[0].length - 1){
      goingDown = true
      if(c === array[0].length - 1){
        r++
      }else {
        c++
      }
    }else {
      r--
      c++
    }

  }
}

return result


function OutBound(r,c,matrix){
  return r < 0 || r >= matrix.length || c < 0 || c >= matrix[0].length
}
